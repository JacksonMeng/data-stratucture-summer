import java.util.Stack;

public class BalanceChecker {

    // Method to check if the character is a type of bracket
    private static boolean isBracket(char character) {
        return character == '(' || character == ')' || character == '{' || character == '}' || character == '[' || character == ']';
    }

    // Method to check if opening and closing brackets are of the same type
    private static boolean bracketsMatch(char opening, char closing) {
        return (opening == '(' && closing == ')') || (opening == '{' && closing == '}') || (opening == '[' && closing == ']');
    }

    // Method to check if a string has balanced brackets
    public static boolean hasBalancedBrackets(String input) {
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < input.length(); i++) {
            char current = input.charAt(i);

            if (!isBracket(current)) { // If the current character is not a bracket, skip it
                continue;
            }

            if (current == '(' || current == '{' || current == '[') { // If the current character is an opening bracket, push it onto the stack
                stack.push(current);
            } else if (current == ')' || current == '}' || current == ']') { // If the current character is a closing bracket
                if (stack.isEmpty() || !bracketsMatch(stack.pop(), current)) { // If the stack is empty or the top bracket on the stack doesn't match the closing bracket
                    return false; // The brackets are not balanced
                }
            }
        }

        return stack.isEmpty(); // If the stack is empty, the brackets are balanced. Otherwise, they are not.
    }

    public static void main(String[] args) {
        String input = "{[()]}";
        System.out.println("The string " + input + " has balanced brackets: " + hasBalancedBrackets(input));
    }
}
