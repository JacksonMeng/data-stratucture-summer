import java.util.Stack;

public class ParenthesesBalance {
    
    // Returns true if the parentheses in the given string are balanced
    public static boolean areParenthesesBalanced(String expr) {
        // Using ArrayDeque is faster than using Stack class
        Stack<Character> stack = new Stack<Character>();

        // Traversing the expression
        for (int i = 0; i < expr.length(); i++) {
            char x = expr.charAt(i);

            if (x == '(' || x == '[' || x == '{') {
                // Push the element in the stack
                stack.push(x);
                continue;
            }

            // If current character is not opening bracket, then it must be closing.  
            // So stack cannot be empty at this point.
            if (stack.isEmpty())
                return false;

            char check;
            switch (x) {
            case ')':
                check = stack.pop();
                if (check == '{' || check == '[')
                    return false;
                break;

            case '}':
                check = stack.pop();
                if (check == '(' || check == '[')
                    return false;
                break;

            case ']':
                check = stack.pop();
                if (check == '(' || check == '{')
                    return false;
                break;
            }
        }

        // Check empty in case of balanced expression
        return (stack.isEmpty());
    }

    // Driver code
    public static void main(String[] args) {
        String expr = "([{}])";

        // Function call
        if (areParenthesesBalanced(expr))
            System.out.println("Balanced ");
        else
            System.out.println("Not Balanced ");
    }
}
