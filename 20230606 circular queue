class Process {
    int pid;
    int burstTime;
    int remainingBurstTime;

    public Process(int pid, int burstTime) {
        this.pid = pid;
        this.burstTime = burstTime;
        this.remainingBurstTime = burstTime;
    }
}

class CircularQueue {
    Process[] queue;
    int front, rear, size;

    CircularQueue(int capacity) {
        queue = new Process[capacity];
        front = rear = -1;
    }

    void enqueue(Process process) {
        if ((rear + 1) % queue.length == front) {
            System.out.println("Queue is full");
        } else {
            if (front == -1)
                front = 0;
            rear = (rear + 1) % queue.length;
            queue[rear] = process;
        }
    }

    Process dequeue() {
        Process process = null;
        if (front == -1) {
            System.out.println("Queue is empty");
        } else {
            process = queue[front];
            if (front == rear) {
                front = -1;
                rear = -1;
            } else {
                front = (front + 1) % queue.length;
            }
        }
        return process;
    }

    boolean isEmpty() {
        return front == -1;
    }
}

class RoundRobinScheduler {
    private CircularQueue queue;
    private int quantum;

    public RoundRobinScheduler(int quantum, int capacity) {
        this.quantum = quantum;
        this.queue = new CircularQueue(capacity);
    }

    public void addProcess(Process process) {
        queue.enqueue(process);
    }

    public void schedule() {
        while (!queue.isEmpty()) {
            Process currentProcess = queue.dequeue();
            currentProcess.remainingBurstTime -= quantum;

            if (currentProcess.remainingBurstTime <= 0) {
                System.out.println("Process " + currentProcess.pid + " completed. Burst time was " + currentProcess.burstTime);
            } else {
                queue.enqueue(currentProcess);
                System.out.println("Process " + currentProcess.pid + " executed for " + quantum + " units. Remaining burst time is " + currentProcess.remainingBurstTime);
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        long startMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        long startTime = System.nanoTime();

        RoundRobinScheduler scheduler = new RoundRobinScheduler(10, 5);
        scheduler.addProcess(new Process(1, 27));
        scheduler.addProcess(new Process(2, 18));
        scheduler.addProcess(new Process(3, 25));
        scheduler.schedule();

        long endTime = System.nanoTime();
        long endMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();

        System.out.println("Execution time: " + (endTime - startTime) / 1_000_000 + " ms");
        System.out.println("Memory used: " + (endMemory - startMemory) / 1024 + " KB");
    }
}
