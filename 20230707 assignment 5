import java.util.*;

class Node implements Comparator<Node> {
    public int node;
    public int cost;

    public Node() {}

    public Node(int node, int cost) {
        this.node = node;
        this.cost = cost;
    }

    @Override
    public int compare(Node node1, Node node2) {
        return Integer.compare(node1.cost, node2.cost);
    }
}

public class Main {
    public static void main(String[] args) {
        int V = 9;
        int source = 0;

        List<List<Node>> adj = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            List<Node> item = new ArrayList<>();
            adj.add(item);
        }

        adj.get(0).add(new Node(1, 4));
        adj.get(1).add(new Node(0, 4));

        adj.get(0).add(new Node(7, 8));
        adj.get(7).add(new Node(0, 8));

        adj.get(1).add(new Node(7, 11));
        adj.get(7).add(new Node(1, 11));

        adj.get(1).add(new Node(2, 8));
        adj.get(2).add(new Node(1, 8));

        adj.get(2).add(new Node(8, 2));
        adj.get(8).add(new Node(2, 2));

        adj.get(7).add(new Node(8, 7));
        adj.get(8).add(new Node(7, 7));

        adj.get(7).add(new Node(6, 1));
        adj.get(6).add(new Node(7, 1));

        adj.get(8).add(new Node(6, 6));
        adj.get(6).add(new Node(8, 6));

        adj.get(6).add(new Node(5, 2));
        adj.get(5).add(new Node(6, 2));

        adj.get(2).add(new Node(5, 4));
        adj.get(5).add(new Node(2, 4));

        adj.get(2).add(new Node(3, 7));
        adj.get(3).add(new Node(2, 7));

        adj.get(3).add(new Node(5, 14));
        adj.get(5).add(new Node(3, 14));


        adj.get(3).add(new Node(4, 9));
        adj.get(4).add(new Node(3, 9));

        adj.get(4).add(new Node(5, 10));
        adj.get(5).add(new Node(4, 10));

        ShortestPath dpq = new ShortestPath(V);
        dpq.dijkstra(adj, source);

        dpq.printShortestPath(4);  // Print the shortest path from node 0 to node 4
    }
}

import java.util.*;

public class ShortestPath {
    private final int dist[];
    private final Set<Integer> settled;
    private final PriorityQueue<Node> pq;
    private final int V;
    private final int[] prev;
    List<List<Node>> adj;

    public ShortestPath(int V) {
        this.V = V;
        dist = new int[V];
        settled = new HashSet<>();
        pq = new PriorityQueue<>(V, new Node());
        prev = new int[V];
    }

    public void dijkstra(List<List<Node>> adj, int src) {
        this.adj = adj;

        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE;
            prev[i] = -1;
        }

        pq.add(new Node(src, 0));
        dist[src] = 0;

        while (!pq.isEmpty()) {
            int u = pq.remove().node;
            settled.add(u);
            visitNeighbours(u);
        }
    }

    private void visitNeighbours(int u) {
        for (int i = 0; i < adj.get(u).size(); i++) {
            Node v = adj.get(u).get(i);

            if (!settled.contains(v.node)) {
                int edgeDistance = v.cost;
                int newDistance = dist[u] + edgeDistance;

                if (newDistance < dist[v.node]) {
                    dist[v.node] = newDistance;
                    prev[v.node] = u;
                    pq.add(new Node(v.node, dist[v.node]));
                }
            }
        }
    }

    public void printShortestPath(int destination) {
        List<Integer> path = new ArrayList<>();
        for (int v = destination; v != -1; v = prev[v])
            path.add(v);

        Collections.reverse(path);
        System.out.println("Shortest path from node 0 to node 4: " + path);
    }



}
