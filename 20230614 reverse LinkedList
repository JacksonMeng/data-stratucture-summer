public class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }

    // Method to add a new node to the end of the list
    public static ListNode addNode(ListNode head, int val) {
        if (head == null) {
            return new ListNode(val);
        } else {
            ListNode current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = new ListNode(val);
            return head;
        }
    }

    public static ListNode reverseLinkedList(ListNode head) {
        ListNode previousNode = null;
        ListNode currentNode = head;
        ListNode nextNode;

        while (currentNode != null) {
            nextNode = currentNode.next;
            currentNode.next = previousNode;
            previousNode = currentNode;
            currentNode = nextNode;
        }

        return previousNode;
    }

    public static void printLinkedList(ListNode head) {
        ListNode currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.val + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ListNode head = null;

        head = addNode(head, 1);
        head = addNode(head, 2);
        head = addNode(head, 3);
        head = addNode(head,4);
        head = addNode(head, 5);


        System.out.println("Original list:");
        printLinkedList(head);

        head = reverseLinkedList(head);

        System.out.println("Reversed list:");
        printLinkedList(head);
    }
}
